Create an AWS Lambda function that generates a leaderboard.
You can use any programming language you like, provided that it is supported by AWS Lambda, or you include the necessary runtime in your solution.
There is an included template file for JavaScript.
If you choose to use an esoteric programming language (ex. Brainfuck), you must provide a detailed description of each line.

You do not need to make sure the function actually works with AWS lambda; simply being able to call the function in the same way it would be called by AWS Lambda (as done in the template) and getting the correct result is enough.
A basic description of how to simulate AWS Lambda calls is located at the end of these instructions.

There must be options to rank the users by the following stats:
- kills
- deaths
- assists
- wins
- losses

The leaderboard should also have optional paging. (ex. you can request 25 users per page, and the third page)

A MySQL database dump is included as table.sql. This contains the table of users who will appear in the leaderboard









AWS Lambda Calls:

An AWS Lambda function receives an 'event' object. This object contains information about the request, such as request body, headers, path parameters, and any other data.
For this exercise, only body and/or path parameters need to be considered. They work in the following ways:

Example call: `curl -H "Content-Type: application/json" -d '{"test": true}' https://endpoint.com/test`
Example event object: `{"body": "{\"test\": true}"}` (Normally the header would also be included, but we can ignore this)

For path parameters, you will need to name each parameter. This is similar to naming things in a JSON object, but in this case you name the parameters in AWS API Gateway.
For purposes of this exercise, you can name them anything you want.

For example, let's name the first parameter 'test' and the second parameter 'test1'

Example call: `curl https://endpoint.com/test/xenum/ethereum`
Example event object: `{"pathParameters": {"test": "xenum", "test1": "ethereum"}}`
